// Firebase removed: local stubs for compatibility during migration
const Timestamp = { now: () => ({ toMillis: () => Date.now() }) } as any;
import { Property, isAIDescription, AIDescription, AgentProfile } from '../types';

export interface Consultation {
    id?: string;
    name: string;
    email: string;
    phone: string;
    date: string;
    time: string;
    message: string;
    calendarEventId?: string;
    meetLink?: string;
    status: 'scheduled' | 'completed' | 'cancelled';
    createdAt: Timestamp;
}

/**
 * Adds a new property document to Firestore.
 * @param propertyData The property data to save. The 'id' will be auto-generated by Firestore.
 * @param userId The ID of the user who owns this property.
 */
export const addProperty = async (_propertyData: Omit<Property, 'id'>, _userId: string): Promise<string> => {
  return `prop_${Date.now()}`;
};

/**
 * Fetches all properties for a given user from Firestore.
 * @param userId The ID of the user whose properties to fetch.
 * @returns A promise that resolves to an array of properties.
 */
export const getProperties = async (_userId: string): Promise<Property[]> => {
  return [];
};

/**
 * Adds a new consultation to Firestore.
 * @param consultationData The consultation data to save.
 * @returns A promise that resolves to the consultation ID.
 */
export const addConsultation = async (_data: Omit<Consultation, 'id' | 'createdAt'>): Promise<string> => `consult_${Date.now()}`;

/**
 * Fetches all consultations from Firestore.
 * @returns A promise that resolves to an array of consultations.
 */
export const getConsultations = async (): Promise<Consultation[]> => [];