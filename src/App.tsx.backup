import React, { useState, useEffect, Suspense, lazy } from 'react';
import { AdminModalProvider } from './context/AdminModalContext';
import { supabase } from './services/supabase';
import { Property, View, AgentProfile, NotificationSettings, EmailSettings, CalendarSettings, BillingSettings, Lead, Appointment, AgentTask, Interaction, Conversation, FollowUpSequence } from './types';
import { DEMO_FAT_PROPERTIES, DEMO_FAT_LEADS, DEMO_FAT_APPOINTMENTS, DEMO_SEQUENCES } from './demoConstants';
import { SAMPLE_AGENT, SAMPLE_TASKS, SAMPLE_CONVERSATIONS, SAMPLE_INTERACTIONS } from './constants';
import LandingPage from './components/LandingPage';
import SignUpPage from './components/SignUpPage';
import SignInPage from './components/SignInPage';
// import TrialSignupForm from './components/TrialSignupForm';
import WelcomePage from './components/WelcomePage';
import SignUpVerifyPage from './components/SignUpVerifyPage';
import Dashboard from './components/Dashboard';
import Sidebar from './components/Sidebar';
import PropertyPage from './components/PropertyPage';
import ListingsPage from './components/ListingsPage';
import AddListingPage from './components/AddListingPage';
import LeadsAndAppointmentsPage from './components/LeadsAndAppointmentsPage';
import InteractionHubPage from './components/InteractionHubPage';
import AIConversationsPage from './components/AIConversationsPage';
import AICardPage from './components/AICardPage';

// import KnowledgeBasePage from './components/KnowledgeBasePage';
import MarketingPage from './components/MarketingPage';
import SettingsPage from './components/SettingsPage';
import AnalyticsDashboard from './components/AnalyticsDashboard';

import ConsultationModal from './components/ConsultationModal';
import { AISidekickProvider } from './context/AISidekickContext';
import { getProfileForDashboard, subscribeToProfileChanges } from './services/agentProfileService';
// Lazy load admin components for better performance
const AdminSidebar = lazy(() => import('./components/AdminSidebar'));
const AdminLayout = lazy(() => import('./components/AdminLayout'));
const AdminLogin = lazy(() => import('./components/AdminLogin'));
const AdminSetup = lazy(() => import('./components/AdminSetup'));
import BlogPage from './components/BlogPage';
import BlogPostPage from './components/BlogPostPage';


// Removed demo/test pages to streamline production bundle
import ChatBotFAB from './components/ChatBotFAB';
import PropertyComparison from './components/PropertyComparison';
import NotificationSystem from './components/NotificationSystem';
import LoadingSpinner from './components/LoadingSpinner';
import { adminAuthService } from './services/adminAuthService';
import AIAgentHub from './components/AIAgentHub';
import EnhancedAISidekicksHub from './components/EnhancedAISidekicksHub';
import CheckoutPage from './components/CheckoutPage';

import { listProperties as listPropertiesFromSupabase, addProperty as addPropertyToSupabase } from './services/propertiesService';
import { LogoWithName } from './components/LogoWithName';
import { ErrorBoundary } from './components/ErrorBoundary';
import { EnvValidation } from './utils/envValidation';
// SessionService removed
import { listAppointments } from './services/appointmentsService';
import { listLeads as listLeadsFromSupabase } from './services/leadsService';
import { PerformanceService } from './services/performanceService';
import SequenceExecutionService from './services/sequenceExecutionService';
import { getCurrentUserProfile, ensureUserProfile } from './services/userProfileService';
import { routes } from './lib/routes';
import AgentWelcomeDashboard from './components/AgentWelcomeDashboard';


// A helper function to delay execution
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

const App: React.FC = () => {
    const [user, setUser] = useState<any | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isSettingUp, setIsSettingUp] = useState(false);
    const [isDemoMode, setIsDemoMode] = useState(false);
    // Use a plain string for view to avoid mismatches between multiple View type declarations
    // (several `types.ts` files exist in the repo). We'll keep runtime checks as strings.
    const [view, setView] = useState<string>('landing');
    

    const [selectedPropertyId, setSelectedPropertyId] = useState<string | null>(null);
    const [properties, setProperties] = useState<Property[]>([]);
    const [leads, setLeads] = useState<Lead[]>([]);
    const [appointments, setAppointments] = useState<Appointment[]>([]);
    const [interactions, setInteractions] = useState<Interaction[]>([]);
    const [tasks, setTasks] = useState<AgentTask[]>([]);
    const [conversations, setConversations] = useState<Conversation[]>([]);
    const [sequences, setSequences] = useState<FollowUpSequence[]>([]);

    // Removed unused selectedLead state
    const [isConsultationModalOpen, setIsConsultationModalOpen] = useState(false);
    const [scrollToSection, setScrollToSection] = useState<string | null>(null);
    const [welcomeData, setWelcomeData] = useState<{email: string, name: string} | null>(null);
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    // Notification system is now handled by NotificationSystem component
    const [isPropertyComparisonOpen, setIsPropertyComparisonOpen] = useState(false);
    // Removed unused analyticsTimeRange state
    const [isAdminLoginOpen, setIsAdminLoginOpen] = useState(false);
    const [adminLoginError, setAdminLoginError] = useState<string | null>(null);
    const [isAdminLoginLoading, setIsAdminLoginLoading] = useState(false);


    // Mock data for settings
    const [userProfile, setUserProfile] = useState<AgentProfile>(SAMPLE_AGENT);
    const [isProfileLoading, setIsProfileLoading] = useState(false);
        const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({
        newLead: true,
        appointmentScheduled: true,
        aiInteraction: false,
        weeklySummary: true,
        appointmentReminders: true,
        taskReminders: true,
        marketingUpdates: true,
        propertyInquiries: true,
        showingConfirmations: true,
        hotLeads: true,
        priceChanges: false,
        contractMilestones: true,
        browserNotifications: true,
        weekendNotifications: true,
        weeklyReport: true,
        monthlyInsights: true
    });
    const [emailSettings, setEmailSettings] = useState<EmailSettings>({ integrationType: 'oauth', aiEmailProcessing: true, autoReply: true, leadScoring: true, followUpSequences: true });
    	const [calendarSettings, setCalendarSettings] = useState<CalendarSettings>({ 
		integrationType: 'google', 
		aiScheduling: true, 
		conflictDetection: true, 
		emailReminders: true, 
		autoConfirm: false,
		workingHours: { start: '09:00', end: '17:00' },
		workingDays: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
		defaultDuration: 60,
		bufferTime: 15,
		smsReminders: true,
		newAppointmentAlerts: true
	});
    const [billingSettings, setBillingSettings] = useState<BillingSettings>({ planName: 'Solo Agent', history: [{id: 'inv-123', date: '07/15/2024', amount: 59.00, status: 'Paid'}] });
    // Removed unused state variables


    // Handle URL hash routing
    useEffect(() => {
        const handleHashChange = () => {
            const hash = window.location.hash.substring(1); // Remove the #
            // Support per-user slug paths like {slug}/dashboard|welcome
            if (hash.includes('/dashboard') || hash.includes('/welcome')) {
                const parts = hash.split('/');
                const section = parts[1] || 'dashboard';
                
                // Check if user is authenticated for personalized routes
                (async () => {
                    try {
                        const { data } = await supabase.auth.getUser();
                        if (!data.user) {
                            // Not authenticated, redirect to signin with next parameter
                            const encodedNext = encodeURIComponent(`#${hash}`);
                            window.location.hash = `signin?next=${encodedNext}`;
                            return;
                        }
                        
                        // User is authenticated, proceed with routing
                        if (section === 'welcome') {
                            setView('welcome');
                        } else if (section === 'dashboard') {
                            setView('dashboard');
                        } else if (section === 'signin') {
                            setView('signin');
                        } else if (section === 'signup') {
                            setView('signup');
                        } else if (section === 'landing') {
                            setView('landing');
                        }
                        setIsLoading(false);
                        return;
                    } catch {
                        // Error getting user, redirect to signin
                        const encodedNext = encodeURIComponent(`#${hash}`);
                        window.location.hash = `signin?next=${encodedNext}`;
                    }
                })();
                return;
            }
            if (hash === '') {
                setView('landing');
                setIsLoading(false);
            } else if (hash === 'admin-dashboard') {
                setView('admin-dashboard');
                // Reset admin login modal state when going to admin-dashboard
                setIsAdminLoginOpen(false);
                setAdminLoginError(null);
            } else if (hash === 'admin-setup') {
                setView('admin-setup');
                // Reset admin login modal state when going to admin-setup
                setIsAdminLoginOpen(false);
                setAdminLoginError(null);
            } else if (hash === 'ai-card') {
                // AI Card route
                setView('dashboard');
                setIsLoading(false);
            } else if (hash === 'landing') {
                setView('landing');
                setIsLoading(false);
            } else if (hash === 'signin') {
                // If already authenticated, skip signin and go to dashboard
                (async () => {
                    try {
                        const { data } = await supabase.auth.getUser();
                        if (data.user) {
                            try {
                                const profile = await getCurrentUserProfile();
                                if (profile?.slug) {
                                    window.location.hash = routes.dashboardSlug(profile.slug);
                                } else {
                                    window.location.hash = 'dashboard';
                                }
                            } catch {
                                window.location.hash = 'dashboard';
                            }
                            setIsLoading(false);
                            return;
                        }
                    } catch {}
                    setView('signin');
                    setIsLoading(false);
                })();
            } else if (hash === 'signup') {
                console.log('Hash change: Setting view to signup');
                setView('signup');
                setIsLoading(false);
            } else if (hash === 'checkout') {
                setView('checkout');
                setIsLoading(false);
            } else if (hash === 'dashboard') {
                // Force redirect to personalized dashboard for authenticated users
                (async () => {
                    try {
                        const { data } = await supabase.auth.getUser();
                        if (data.user) {
                            let profile = await getCurrentUserProfile();
                            if (!profile) {
                                profile = await ensureUserProfile();
                            }
                            if (profile?.slug) {
                                window.location.hash = routes.dashboardSlug(profile.slug);
                                return;
                            }
                        }
                        // Fallback for unauthenticated or missing profile
                        setView('dashboard');
                        setIsLoading(false);
                    } catch {
                        setView('dashboard');
                        setIsLoading(false);
                    }
                })();
            } else if (hash === 'trial-signup') {
                setView('trial-signup');
                setIsLoading(false);
            } else if (hash === 'signup/verify') {
                setView('signup-verify');
                setIsLoading(false);
            } else if (hash === 'welcome' || hash === 'signup/next') {
                setView('welcome');
                // If authenticated, rewrite to per-user welcome
                (async () => {
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                        }
                    } catch {}
                })();
                setIsLoading(false);
            } else if (hash === 'test') {
                setView('landing');
                setIsLoading(false);
            } else if (hash === 'openai-test') {
                // removed
                setView('dashboard');
                setIsLoading(false);
            } else if (hash === 'ai-sidekicks') {
                setView('ai-sidekicks');
                setIsLoading(false);
            } else if (hash === 'demo-listing') {
                setView('demo-listing');
                setIsLoading(false);
            }
        };

        // Handle initial hash with a small delay to avoid race conditions
        setTimeout(handleHashChange, 100);

        // Listen for hash changes
        window.addEventListener('hashchange', handleHashChange);
        return () => window.removeEventListener('hashchange', handleHashChange);
    }, []);

    // Fail-safe: if a view is selected, ensure loading spinner is cleared
    useEffect(() => {
        if (view) {
            setIsLoading(false);
        }
    }, [view]);

    useEffect(() => {
        // Validate environment on app startup
        EnvValidation.logValidationResults();
        
        // Initialize session tracking
        // SessionService removed
        
        // Initialize performance monitoring
        PerformanceService.initialize();
        
        const initAuth = async () => {
            const { data } = await supabase.auth.getUser();
            const currentUser = data.user
                ? { uid: data.user.id, email: data.user.email, displayName: data.user.user_metadata?.name }
                : null;
            setIsLoading(true);
            setIsSettingUp(false); // Reset on every auth change
            setIsDemoMode(false); // Reset demo mode on any auth change

            // Force signup mode - bypass auth check
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('force') === 'signup') {
                setView('signup');
                setIsLoading(false);
                return;
            }

            if (currentUser) {
                console.log(`User signed in: ${currentUser.uid}`);
                // Only redirect from signin/signup when authenticated (keep landing page accessible)
                const currentHash = window.location.hash.substring(1);
                if ((currentHash === 'signup' || currentHash === 'signin') && !currentHash.startsWith('admin-')) {
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                        } else {
                            window.location.hash = 'dashboard';
                        }
                    } catch {
                        window.location.hash = 'dashboard';
                    }
                    setIsLoading(false);
                    return;
                } else if (currentHash === 'checkout') {
                    setView('checkout');
                    setIsLoading(false);
                    return;
                }
                
                // Check if user is an admin (owner domain or specific admin)
                const isAdmin = currentUser.email === 'us@homelistingai.com' || (currentUser.email?.endsWith('@homelistingai.com'));
                
                if (isAdmin) {
                    console.log("Admin user detected, going to admin dashboard");
                    setUser(currentUser);
                    setUserProfile({
                        ...SAMPLE_AGENT,
                        name: 'System Administrator',
                        email: currentUser.email ?? '',
                        headshotUrl: `https://i.pravatar.cc/150?u=${currentUser.uid}`,
                    });
                    setProperties([]);
                    setLeads([]);
                    setAppointments([]);
                    setInteractions([]);
                    setTasks([]);
                    setConversations([]);
                    setSequences([]);
                    setView('admin-dashboard');
                    setIsLoading(false);
                    return;
                }
                
                // Auto-redirect authenticated users to their personalized dashboard
                const initHash = window.location.hash.substring(1);
                if (!initHash || initHash === 'landing' || initHash === '') {
                    // Redirect authenticated user to their personalized dashboard
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                            setIsLoading(false);
                            return;
                        } else {
                            const ensured = await ensureUserProfile();
                            if (ensured?.slug) {
                                window.location.hash = routes.dashboardSlug(ensured.slug);
                                setIsLoading(false);
                                return;
                            }
                        }
                    } catch (e) {
                        console.warn('Profile redirect failed:', e);
                    }
                } else if (initHash === 'dashboard') {
                    // Force personalized dashboard for generic dashboard route
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                        } else {
                            const ensured = await ensureUserProfile();
                            if (ensured?.slug) {
                                window.location.hash = routes.dashboardSlug(ensured.slug);
                            }
                        }
                    } catch {}
                }
                
                let propertiesToLoad: Property[] = [];
                let attempts = 0;
                const maxAttempts = 5;

                // Skip Supabase properties entirely - use backend listings
                propertiesToLoad = [];

                setIsSettingUp(false); // Stop showing setup message

                if (propertiesToLoad.length > 0) {
                    console.log("Properties loaded successfully.");
                    const profileToLoad = propertiesToLoad[0].agent;

                    setUser(currentUser);
                    setUserProfile(profileToLoad);
                    setProperties(propertiesToLoad);
                    // Load related data from Supabase (leads, appointments)
                    try {
                        const [leadRows, apptRows] = await Promise.all([
                            listLeadsFromSupabase(currentUser.uid),
                            listAppointments(currentUser.uid)
                        ]);
                        setLeads(leadRows);
                        setAppointments(apptRows.map(r => ({
                            id: r.id,
                            type: r.kind,
                            date: r.date,
                            time: r.time_label,
                            leadId: r.lead_id || '',
                            propertyId: r.property_id || '',
                            notes: r.notes || '',
                            status: r.status
                        })));
                    } catch (e) {
                        console.warn('Secondary data load failed:', e);
                        setLeads([]);
                        setAppointments([]);
                    }
                    setInteractions([]);
                    setTasks([]);
                    setConversations([]);
                    setSequences([]);
                    // Use personalized dashboard route for real users
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                            return;
                        } else {
                            const ensured = await ensureUserProfile();
                            if (ensured?.slug) {
                                window.location.hash = routes.dashboardSlug(ensured.slug);
                                return;
                            }
                        }
                    } catch {}
                    setView('dashboard');
                } else {
                    // Blank state for new/empty accounts
                    setUser(currentUser);
                    setProperties([]);
                    setUserProfile(prev => ({ ...prev, name: currentUser.displayName ?? 'New Agent', email: currentUser.email ?? '' }));
                    setLeads([]);
                    setAppointments([]);
                    setInteractions([]);
                    setTasks([]);
                    setConversations([]);
                    setSequences([]);
                    // Use personalized dashboard route
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                            return;
                        } else {
                            const ensured = await ensureUserProfile();
                            if (ensured?.slug) {
                                window.location.hash = routes.dashboardSlug(ensured.slug);
                                return;
                            }
                        }
                    } catch {}
                    setView('dashboard');
                }
            } else {
                // User is signed out.
                console.log("User signed out.");
                setUser(null);
                setProperties([]);
                setUserProfile(SAMPLE_AGENT);
                setLeads([]);
                setAppointments([]);
                setInteractions([]);
                setTasks([]);
                setConversations([]);
                setSequences([]);
                // Don't override admin-setup view when user signs out
                if (view !== 'admin-setup') {
                    setView('landing');
                }
            }
            setIsLoading(false);
        };

        initAuth();

        const { data: sub } = supabase.auth.onAuthStateChange(async (_event, session) => {
            const currentUser = session?.user
                ? { uid: session.user.id, email: session.user.email, displayName: session.user.user_metadata?.name }
                : null;
            // Re-run the same flow with new user
            setIsLoading(true);
            setIsSettingUp(false);
            setIsDemoMode(false);
            if (currentUser) {
                console.log(`User signed in: ${currentUser.uid}`);
                setUser(currentUser);
                // Only redirect from signin/signup when auth state changes (keep landing accessible)
                const currentHash = window.location.hash.substring(1);
                if ((currentHash === 'signin' || currentHash === 'signup') && !currentHash.startsWith('admin-')) {
                    try {
                        const profile = await getCurrentUserProfile();
                        if (profile?.slug) {
                            window.location.hash = routes.dashboardSlug(profile.slug);
                        } else {
                            window.location.hash = 'dashboard';
                        }
                    } catch {
                        window.location.hash = 'dashboard';
                    }
                }
            } else {
                console.log('User signed out.');
                setUser(null);
            }
            setIsLoading(false);
        });

        return () => { sub.subscription.unsubscribe(); };
    }, []);

    // Only redirect from signin/signup when authenticated (keep landing accessible)
    useEffect(() => {
        if (!user) return;
        const currentHash = typeof window !== 'undefined' ? window.location.hash.substring(1) : '';
        if (currentHash === 'signin' || currentHash === 'signup') {
            // Don't redirect if we're going to admin routes
            if (!currentHash.startsWith('admin-')) {
                window.location.hash = 'dashboard';
            }
        }
    }, [user]);

    // Load centralized agent profile and set up real-time updates
    useEffect(() => {
        if (user && !isDemoMode) {
                    // Load centralized agent profile
        loadAgentProfile();
        
        // Load listings from backend
        loadListingsFromBackend();
            
            // Subscribe to profile changes for real-time updates
            const unsubscribe = subscribeToProfileChanges((updatedProfile) => {
                setUserProfile(prev => ({
                    ...prev,
                    name: updatedProfile.name,
                    title: updatedProfile.title,
                    company: updatedProfile.company,
                    headshotUrl: updatedProfile.headshotUrl,
                    email: updatedProfile.email,
                    phone: updatedProfile.phone
                }));
                console.log('🔄 Profile updated across app');
            });
            
            return () => {
                unsubscribe();
            };
        }
    }, [user, isDemoMode]);

    const handleNavigateToSignUp = async () => {
        try {
            // Ensure we show the sign-up form, not a logged-in dashboard
            await supabase.auth.signOut();
            setUser(null);
            setIsDemoMode(false);
            // Clear any cached data
            setProperties([]);
            setLeads([]);
            setAppointments([]);
            setInteractions([]);
            setTasks([]);
            setConversations([]);
            setSequences([]);
        } catch (error) {
            console.log('Sign out error (expected for non-authenticated users):', error);
        }
        // Force the view change
        setView('signup');
        window.location.hash = 'signup';
    };
    const handleNavigateToSignIn = () => { setView('signin'); window.location.hash = 'signin'; };
    const handleNavigateToLanding = () => { setView('landing'); window.location.hash = 'landing'; };
    const handleNavigateToTrialSignup = () => setView('trial-signup');
    
    const handleTrialSignupSuccess = (user: any) => {
        setUser(user);
        // Route new signups to admin dashboard so you can configure the app
        setView('admin-dashboard');
        window.location.hash = 'admin-dashboard';
    };
    
    const handleNavigateToWelcome = (email: string, name: string) => {
        setWelcomeData({ email, name });
        setView('welcome');
        window.location.hash = 'welcome';
    };
    
    const loadLeadsFromBackend = async () => {
        try {
            const response = await fetch('/api/admin/leads');
            if (response.ok) {
                const data = await response.json();
                setLeads(data.leads || []);
                console.log('✅ Loaded leads from backend:', data.leads?.length || 0);
            } else {
                console.warn('Failed to load leads from backend, using demo data');
                setLeads(DEMO_FAT_LEADS);
            }
        } catch (error) {
            console.error('Error loading leads from backend:', error);
            setLeads(DEMO_FAT_LEADS);
        }
    };

    // Load centralized agent profile
    const loadAgentProfile = async () => {
        try {
            setIsProfileLoading(true);
            // Primary source (centralized profile)
            const profileData = await getProfileForDashboard();
            setUserProfile(prev => ({
                ...prev,
                name: profileData.name,
                title: profileData.title,
                company: profileData.company,
                headshotUrl: profileData.headshotUrl,
                email: profileData.email,
                phone: profileData.phone
            }));
            console.log('✅ Loaded centralized agent profile');
        } catch (error) {
            console.error('Failed to load agent profile:', error);
            // Fallback to Supabase user_profiles to avoid showing SAMPLE_AGENT
            try {
                const prof = await getCurrentUserProfile();
                if (prof?.name) {
                    setUserProfile(prev => ({ ...prev, name: prof.name }));
                }
            } catch {}
        } finally {
            setIsProfileLoading(false);
        }
    };

    // Guard against showing SAMPLE_AGENT when a real user is signed in
    useEffect(() => {
        if (user && userProfile?.name === SAMPLE_AGENT.name) {
            setUserProfile(prev => ({
                ...prev,
                name: user.displayName || 'Your Dashboard',
                email: user.email || prev.email,
            }));
        }
    }, [user, userProfile?.name]);

    // Load listings from backend
    const loadListingsFromBackend = async () => {
        try {
            const response = await fetch('/api/listings');
            if (response.ok) {
                const data = await response.json();
                // Convert backend format to frontend format
                const backendListings = data.listings || [];
                const frontendProperties = backendListings.map((listing: any) => ({
                    id: listing.id,
                    title: listing.title,
                    address: listing.address,
                    price: listing.price,
                    bedrooms: listing.bedrooms,
                    bathrooms: listing.bathrooms,
                    squareFeet: listing.squareFeet,
                    propertyType: listing.propertyType,
                    description: listing.description || '',
                    imageUrl: listing.heroPhotos?.[0] || '/demo/home-1.png',
                    features: listing.features || [],
                    heroPhotos: listing.heroPhotos || [],
                    galleryPhotos: listing.galleryPhotos || [],
                    agent: listing.agent,
                    appFeatures: {
                        gallery: true,
                        schools: true,
                        financing: true,
                        virtualTour: true,
                        amenities: true,
                        schedule: true,
                        map: true,
                        history: true,
                        neighborhood: true,
                        reports: true,
                        messaging: true
                    },
                    ctaListingUrl: '',
                    ctaMediaUrl: ''
                }));
                setProperties(frontendProperties);
                console.log('✅ Loaded listings from backend:', frontendProperties.length);
            } else {
                console.warn('Failed to load listings from backend, using demo data');
                setProperties(DEMO_FAT_PROPERTIES);
            }
        } catch (error) {
            console.error('Error loading listings from backend:', error);
            setProperties(DEMO_FAT_PROPERTIES);
        }
    };
    
    const handleEnterDemoMode = () => {
        // Keep demo mode for marketing pages only; do not inject into authed views
        setIsDemoMode(true);
        setProperties(DEMO_FAT_PROPERTIES);
        setLeads(DEMO_FAT_LEADS);
        setAppointments(DEMO_FAT_APPOINTMENTS);
        setSequences(DEMO_SEQUENCES);
        setView('demo-dashboard');
    };

    const handleNavigateToAdmin = () => {
        // Show admin login modal instead of direct access
        setIsAdminLoginOpen(true);
        setAdminLoginError(null);
    };

    const handleAdminLogin = async (email: string, password: string) => {
        setIsAdminLoginLoading(true);
        setAdminLoginError(null);
        
        try {
            const trimmedEmail = email.trim();
            const trimmedPassword = password.trim();

            // Try local demo credentials first for immediate access
            const demo = await adminAuthService.login(trimmedEmail, trimmedPassword);
            if (demo.success) {
                setIsAdminLoginOpen(false);
                setView('admin-dashboard');
                window.location.hash = 'admin-dashboard';
                return;
            }

            // If demo credentials don't match, try Supabase Auth
            const { error } = await supabase.auth.signInWithPassword({
                email: trimmedEmail,
                password: trimmedPassword
            });
            
            if (error) {
                setAdminLoginError('Invalid login credentials');
                return;
            }
            
            // Ensure admin metadata
            const { data: { user } } = await supabase.auth.getUser();
            if (user?.user_metadata?.role !== 'admin') {
                await supabase.auth.updateUser({
                    data: { role: 'admin', name: 'Admin User', plan: 'Admin' }
                });
            }
            
            setIsAdminLoginOpen(false);
            setView('admin-dashboard');
            window.location.hash = 'admin-dashboard';
        } catch (error: any) {
            setAdminLoginError('Invalid login credentials');
        } finally {
            setIsAdminLoginLoading(false);
        }
    };

    const handleAdminLoginClose = () => {
        setIsAdminLoginOpen(false);
        setAdminLoginError(null);
    };
    const handleNavigateToSection = (sectionId: string) => {
        if (sectionId === '#contact') {
            setIsConsultationModalOpen(true);
            return;
        }
        setView('landing');
        setScrollToSection(sectionId);
    };

    // Notification handler for future use - will be used when implementing real notifications
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    // Notification handling is now managed by NotificationSystem component

    // Notification handling is now managed by NotificationSystem component

    // Task management handlers
    const handleTaskUpdate = (taskId: string, updates: Partial<AgentTask>) => {
        setTasks(prev => prev.map(task => 
            task.id === taskId ? { ...task, ...updates } : task
        ));
    };

    const handleTaskAdd = (newTask: AgentTask) => {
        setTasks(prev => [newTask, ...prev]);
    };

    const handleTaskDelete = (taskId: string) => {
        setTasks(prev => prev.filter(task => task.id !== taskId));
    };

    const handleSelectProperty = (id: string) => {
        setSelectedPropertyId(id);
        setView('property');
    };
    
    const handleSetProperty = (updatedProperty: Property) => {
        setProperties(prev => prev.map(p => p.id === updatedProperty.id ? updatedProperty : p));
    };

    const handleSaveNewProperty = async (newPropertyData: Omit<Property, 'id' | 'description' | 'imageUrl'>) => {
        if (!user && !isDemoMode) {
            alert("Please sign in to add a new listing.");
            setView('signin');
            return;
        }

        const propertyWithAgent = {
            ...newPropertyData,
            agent: userProfile,
        };
        
        const tempId = `prop-temp-${Date.now()}`;
        const propertyForState: Property = {
            id: tempId,
            description: '',
            imageUrl: 'https://images.unsplash.com/photo-1599809275671-55822c1f6a12?q=80&w=800&auto-format&fit=crop',
            ...propertyWithAgent,
        };
        
        setProperties(prev => [propertyForState, ...prev]);
        setView('listings');

        if (isDemoMode) {
            // In demo mode, simulate saving and then automatically delete the listing after a delay
            setTimeout(() => {
                alert("This is a demo. The listing you just created will now be automatically deleted to complete the demonstration.");
                setProperties(prev => prev.filter(p => p.id !== tempId));
            }, 4000);
        } else if (user) { // Save to Supabase for real users
            try {
                const { id, agent, imageUrl, ...dataForInsert } = propertyForState as any;
                const newDocId = await addPropertyToSupabase(user.uid, dataForInsert);
                
                setProperties(prev => prev.map(p => p.id === tempId ? { ...p, id: newDocId } : p));
            } catch (error) {
                console.error("Failed to save property:", error);
                alert("Error: Could not save the property to the database. Please try again.");
                setProperties(prev => prev.filter(p => p.id !== tempId));
                setView('add-listing');
            }
        }
    };

    const handleDeleteProperty = (id: string) => {
        if(window.confirm('Are you sure you want to delete this listing?')) {
            setProperties(prev => prev.filter(p => p.id !== id));
            if(selectedPropertyId === id) {
                setSelectedPropertyId(null);
                setView('listings');
            }
        }
    };
    
    const handleAddNewLead = async (leadData: { name: string; email: string; phone: string; message: string; source: string; }) => {
        const newLead: Lead = {
            id: `lead-${Date.now()}`,
            name: leadData.name,
            email: leadData.email,
            phone: leadData.phone,
            lastMessage: leadData.message,
            status: 'New',
            date: new Date().toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: '2-digit' })
        };
        setLeads(prev => [newLead, ...prev]);
        
        // Trigger follow-up sequences for new lead
        try {
            const sequenceService = SequenceExecutionService.getInstance();
            await sequenceService.triggerSequences(
                'Lead Capture',
                {
                    lead: newLead,
                    agent: userProfile || SAMPLE_AGENT,
                    property: selectedPropertyId ? properties.find(p => p.id === selectedPropertyId) : undefined
                },
                sequences
            );
            console.log('✅ Lead capture sequences triggered for:', newLead.name);
        } catch (error) {
            console.error('❌ Error triggering sequences:', error);
        }
        
        setView('leads'); 
    };

    // Load sequences from API for authenticated users
    React.useEffect(() => {
        const loadSequences = async () => {
            if (user && !isDemoMode) {
                try {
                    const response = await fetch('/api/admin/marketing/sequences');
                    if (response.ok) {
                        const data = await response.json();
                        setSequences(data.sequences || []);
                        console.log('✅ Loaded sequences from API:', data.sequences?.length || 0);
                    } else {
                        console.warn('Failed to load sequences from API');
                    }
                } catch (error) {
                    console.error('Error loading sequences:', error);
                }
            }
        };
        
        loadSequences();
    }, [user, isDemoMode]);

    // Load appointments from Supabase only when a real user is signed in
    React.useEffect(() => {
        const load = async () => {
            try {
                const uid = (user && (user.id || user.uid)) || undefined;
                if (!uid) {
                    setAppointments([]);
                    return;
                }
                const rows = await listAppointments(uid);
                const mapped: Appointment[] = rows.map(r => ({
                    id: r.id,
                    type: r.kind,
                    date: r.date,
                    time: r.time_label,
                    leadId: r.lead_id || '',
                    propertyId: r.property_id || '',
                    notes: r.notes || '',
                    status: r.status
                }));
                setAppointments(mapped);
            } catch (e) {
                console.warn('Failed loading appointments', e);
            }
        };
        load();
    }, [user]);

	// Track which property is currently selected
	const selectedProperty = properties.find(p => p.id === selectedPropertyId);
	// Detect local admin mode via persisted flag
	const isLocalAdmin = Boolean(localStorage.getItem('adminUser'));

	if (isLoading) {
		return (
			<div className="flex items-center justify-center h-screen bg-slate-50">
				<LoadingSpinner size="xl" type="dots" text="Loading Application..." />
			</div>
		);
	}
	
	if (isSettingUp) {
		return (
			<div className="flex flex-col items-center justify-center h-screen bg-slate-50">
				<LoadingSpinner size="xl" type="pulse" text="Setting up your new account..." />
			</div>
		);
	}

	const renderViewContent = () => {
		// Logged-in, Demo, or Local Admin views
		if (user || isDemoMode || isLocalAdmin) {
			// If explicitly viewing public pages, render them standalone
			if (view === 'landing') {
				return (
					<LandingPage 
						onNavigateToSignUp={handleNavigateToSignUp} 
						onNavigateToSignIn={handleNavigateToSignIn} 
						onNavigateToTrialSignup={handleNavigateToTrialSignup}
						onEnterDemoMode={handleEnterDemoMode}
						scrollToSection={scrollToSection}
						onScrollComplete={() => setScrollToSection(null)}
						onOpenConsultationModal={() => setIsConsultationModalOpen(true)}
						onNavigateToAdmin={handleNavigateToAdmin}
					/>
				);
			}
			if (view === 'signup') {
				return <SignUpPage onNavigateToSignIn={handleNavigateToSignIn} onNavigateToLanding={handleNavigateToLanding} onNavigateToSection={handleNavigateToSection} onEnterDemoMode={handleEnterDemoMode} onNavigateToWelcome={handleNavigateToWelcome} />;
			}
			if (view === 'signin') {
				return <SignInPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToLanding={handleNavigateToLanding} onNavigateToSection={handleNavigateToSection} onEnterDemoMode={handleEnterDemoMode} />;
			}
			if (view === 'signup-verify') {
				return <SignUpVerifyPage />;
			}
			const mainContent = () => {
				switch(view) {
					case 'landing':
						return (
							<LandingPage 
								onNavigateToSignUp={handleNavigateToSignUp} 
								onNavigateToSignIn={handleNavigateToSignIn} 
								onNavigateToTrialSignup={handleNavigateToTrialSignup}
								onEnterDemoMode={handleEnterDemoMode}
								scrollToSection={scrollToSection}
								onScrollComplete={() => setScrollToSection(null)}
								onOpenConsultationModal={() => setIsConsultationModalOpen(true)}
								onNavigateToAdmin={handleNavigateToAdmin}
							/>
						);
					case 'checkout':
						return <CheckoutPage onBack={handleNavigateToLanding} />;
					case 'openai-test':
						return <LandingPage 
							onNavigateToSignUp={handleNavigateToSignUp} 
							onNavigateToSignIn={handleNavigateToSignIn} 
							onNavigateToTrialSignup={handleNavigateToTrialSignup}
							onEnterDemoMode={handleEnterDemoMode}
							scrollToSection={scrollToSection}
							onScrollComplete={() => setScrollToSection(null)}
							onOpenConsultationModal={() => setIsConsultationModalOpen(true)}
							onNavigateToAdmin={handleNavigateToAdmin}
						/>;
					case 'admin-dashboard':
						return <AdminModalProvider><AdminLayout currentView={'admin-dashboard' as any} /></AdminModalProvider>;
					case 'admin-emails':
						return <AdminModalProvider><AdminLayout currentView={view} /></AdminModalProvider>;
					case 'admin-ai-card-new':
						return <AdminModalProvider><AdminLayout currentView={view} /></AdminModalProvider>;
					case 'admin-users':
					case 'admin-knowledge-base': 
					case 'admin-ai-personalities':
					case 'admin-marketing': 
					case 'admin-analytics': 
					case 'admin-security': 
					case 'admin-billing': 
					case 'admin-settings': 
						return <AdminModalProvider><AdminLayout currentView={view} /></AdminModalProvider>;
					case 'admin-leads':
					case 'admin-contacts':
						return <AdminModalProvider><AdminLayout currentView={view} /></AdminModalProvider>;
					case 'dashboard':
						return <Dashboard 
							agentProfile={userProfile} 
							properties={properties} 
							leads={leads} 
							appointments={appointments} 
							tasks={tasks} 
							onSelectProperty={handleSelectProperty} 
							onTaskUpdate={handleTaskUpdate}
							onTaskAdd={handleTaskAdd}
							onTaskDelete={handleTaskDelete}
						/>;
					case 'welcome':
						return <AgentWelcomeDashboard />;
					case 'property': 
						return selectedProperty ? <PropertyPage property={selectedProperty} setProperty={handleSetProperty} onBack={() => setView('listings')} /> : <ListingsPage properties={properties} onSelectProperty={handleSelectProperty} onAddNew={() => setView('add-listing')} onDeleteProperty={handleDeleteProperty} onBackToDashboard={() => setView('dashboard')} />;
					case 'listings': 
						return <ListingsPage properties={properties} onSelectProperty={handleSelectProperty} onAddNew={() => setView('add-listing')} onDeleteProperty={handleDeleteProperty} onBackToDashboard={() => setView('dashboard')}/>;
					case 'add-listing': 
						return <AddListingPage onCancel={() => setView('dashboard')} onSave={handleSaveNewProperty} agentProfile={userProfile || SAMPLE_AGENT} isDemoMode={isDemoMode} />;
					case 'leads': 
						return <LeadsAndAppointmentsPage leads={leads} appointments={appointments} onAddNewLead={handleAddNewLead} onBackToDashboard={() => setView('dashboard')} onNewAppointment={async (appt) => {
                            setAppointments(prev => [appt, ...prev]);
                            
                            // Trigger appointment sequences
                            try {
                                const sequenceService = SequenceExecutionService.getInstance();
                                const lead = leads.find(l => l.id === appt.leadId);
                                if (lead) {
                                    await sequenceService.triggerSequences(
                                        'Appointment Scheduled',
                                        {
                                            lead,
                                            agent: userProfile || SAMPLE_AGENT,
                                            property: properties.find(p => p.id === appt.propertyId)
                                        },
                                        sequences
                                    );
                                    console.log('✅ Appointment sequences triggered for:', lead.name);
                                }
                            } catch (error) {
                                console.error('❌ Error triggering appointment sequences:', error);
                            }
                        }} />;
					case 'inbox': 
						return <InteractionHubPage properties={properties} interactions={interactions} setInteractions={setInteractions} onAddNewLead={handleAddNewLead} onBackToDashboard={() => setView('dashboard')} />;
					case 'ai-conversations':
						return <AIConversationsPage />;
					case 'ai-card':
						return <AICardPage />;
					case 'knowledge-base': 
						return <EnhancedAISidekicksHub />;
					case 'marketing': 
						return <MarketingPage properties={properties} sequences={sequences} setSequences={setSequences} onBackToDashboard={() => setView('dashboard')} />;
					case 'analytics': 
						return <AnalyticsDashboard />;
					case 'ai-sidekicks':
						return <EnhancedAISidekicksHub />;
					case 'demo-listing':
						return <Dashboard agentProfile={userProfile} properties={properties} leads={leads} appointments={appointments} tasks={tasks} onSelectProperty={handleSelectProperty} />;
					case 'demo-dashboard':
						return <Dashboard agentProfile={userProfile} properties={properties} leads={leads} appointments={appointments} tasks={tasks} onSelectProperty={handleSelectProperty} />;
					case 'settings': 
						return <SettingsPage 
							userProfile={userProfile}
							onSaveProfile={setUserProfile}
							notificationSettings={notificationSettings}
							onSaveNotifications={setNotificationSettings}
							emailSettings={emailSettings}
							onSaveEmailSettings={setEmailSettings}
							calendarSettings={calendarSettings}
							onSaveCalendarSettings={setCalendarSettings}
							billingSettings={billingSettings}
							onSaveBillingSettings={setBillingSettings}
							onBackToDashboard={() => setView('dashboard')}
						/>;
					default:
						return <Dashboard 
							agentProfile={userProfile} 
							properties={properties} 
							leads={leads} 
							appointments={appointments} 
							tasks={tasks} 
							onSelectProperty={handleSelectProperty} 
							onTaskUpdate={handleTaskUpdate}
							onTaskAdd={handleTaskAdd}
							onTaskDelete={handleTaskDelete}
						/>;
				}
			};

			// Admin views get the admin sidebar
			if (view.startsWith('admin-')) {
				return (
					<div className="flex h-screen bg-slate-50">
						<Suspense fallback={<LoadingSpinner />}>
							<AdminSidebar activeView={view as any} setView={setView as any} isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />
						</Suspense>
						<div className="flex-1 flex flex-col overflow-hidden">
							<header className="md:hidden flex items-center justify-between p-3 sm:p-4 bg-white border-b border-slate-200 shadow-sm">
								<button onClick={() => setIsSidebarOpen(true)} className="p-2 -ml-1 text-slate-600 hover:bg-slate-100 rounded-lg transition-colors" aria-label="Open menu">
									<span className="material-symbols-outlined text-xl">menu</span>
								</button>
								<div className="flex-1 flex justify-center">
									<LogoWithName />
								</div>
								<div className="w-10"></div> {/* Spacer for balance */}
							</header>
							<main className="flex-1 overflow-x-hidden overflow-y-auto bg-slate-50">
								<Suspense fallback={<LoadingSpinner />}>
									{mainContent()}
								</Suspense>
							</main>
						</div>
					</div>
				);
			}

			return (
				<div className="flex h-screen bg-slate-50">
					<Sidebar activeView={view as any} setView={setView as any} isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />
					<div className="flex-1 flex flex-col overflow-hidden">
						<header className="md:hidden flex items-center justify-between p-3 sm:p-4 bg-white border-b border-slate-200 shadow-sm">
							<button onClick={() => setIsSidebarOpen(true)} className="p-2 -ml-1 text-slate-600 hover:bg-slate-100 rounded-lg transition-colors" aria-label="Open menu">
								<span className="material-symbols-outlined text-xl">menu</span>
							</button>
							<div className="flex-1 flex justify-center">
								<LogoWithName />
							</div>
							<div className="flex items-center space-x-1">
								<NotificationSystem userId={user?.uid || ''} />
								<button onClick={() => setIsPropertyComparisonOpen(true)} className="p-2 text-slate-600 hover:text-slate-900 hover:bg-slate-100 rounded-lg transition-colors" aria-label="Compare properties">
									<span className="material-symbols-outlined text-lg">compare</span>
								</button>
							</div>
						</header>
						<main className="flex-1 overflow-x-hidden overflow-y-auto bg-slate-50">
							{mainContent()}
						</main>
					</div>
				</div>
			);
		}

		// Unauthenticated views
		switch(view) {
			case 'signup':
				return <SignUpPage onNavigateToSignIn={handleNavigateToSignIn} onNavigateToLanding={handleNavigateToLanding} onNavigateToSection={handleNavigateToSection} onEnterDemoMode={handleEnterDemoMode} onNavigateToWelcome={handleNavigateToWelcome} />;
			case 'signin':
				return <SignInPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToLanding={handleNavigateToLanding} onNavigateToSection={handleNavigateToSection} onEnterDemoMode={handleEnterDemoMode} />;
			case 'signup-verify':
				return <SignUpVerifyPage />;
			case 'welcome':
				return welcomeData ? <WelcomePage userEmail={welcomeData.email} userName={welcomeData.name} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToLanding={handleNavigateToLanding} /> : <LandingPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToTrialSignup={handleNavigateToTrialSignup} onEnterDemoMode={handleEnterDemoMode} scrollToSection={scrollToSection} onScrollComplete={() => setScrollToSection(null)} onOpenConsultationModal={() => setIsConsultationModalOpen(true)} onNavigateToAdmin={handleNavigateToAdmin} />;
			// case 'trial-signup':
			//	return <TrialSignupForm onSuccess={handleTrialSignupSuccess} onBack={handleNavigateToLanding} />;
			case 'landing':
				return <LandingPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToTrialSignup={handleNavigateToTrialSignup} onEnterDemoMode={handleEnterDemoMode} scrollToSection={scrollToSection} onScrollComplete={() => setScrollToSection(null)} onOpenConsultationModal={() => setIsConsultationModalOpen(true)} onNavigateToAdmin={handleNavigateToAdmin} />;
			case 'new-landing':
				return <LandingPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToTrialSignup={handleNavigateToTrialSignup} onEnterDemoMode={handleEnterDemoMode} scrollToSection={scrollToSection} onScrollComplete={() => setScrollToSection(null)} onOpenConsultationModal={() => setIsConsultationModalOpen(true)} onNavigateToAdmin={handleNavigateToAdmin} />;
			case 'blog':
				return <BlogPage />;
			case 'blog-post':
				return <BlogPostPage />;
			case 'checkout':
				return <CheckoutPage onBack={handleNavigateToLanding} />;
			case 'demo-listing':
				return <LandingPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToTrialSignup={handleNavigateToTrialSignup} onEnterDemoMode={handleEnterDemoMode} scrollToSection={scrollToSection} onScrollComplete={() => setScrollToSection(null)} onOpenConsultationModal={() => setIsConsultationModalOpen(true)} onNavigateToAdmin={handleNavigateToAdmin} />;
			case 'vapi-test':
				return <LandingPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToTrialSignup={handleNavigateToTrialSignup} onEnterDemoMode={handleEnterDemoMode} scrollToSection={scrollToSection} onScrollComplete={() => setScrollToSection(null)} onOpenConsultationModal={() => setIsConsultationModalOpen(true)} onNavigateToAdmin={handleNavigateToAdmin} />;
			case 'admin-setup':
				if (isAdminLoginOpen) {
					setIsAdminLoginOpen(false);
					setAdminLoginError(null);
				}
				return (
					<Suspense fallback={<LoadingSpinner />}>
						<AdminSetup />
					</Suspense>
				);
			default:
				return <LandingPage onNavigateToSignUp={handleNavigateToSignUp} onNavigateToSignIn={handleNavigateToSignIn} onNavigateToTrialSignup={handleNavigateToTrialSignup} onEnterDemoMode={handleEnterDemoMode} scrollToSection={scrollToSection} onScrollComplete={() => setScrollToSection(null)} onOpenConsultationModal={() => setIsConsultationModalOpen(true)} onNavigateToAdmin={handleNavigateToAdmin} />;
		}
	};

	return (
		<ErrorBoundary>
			<AISidekickProvider>
				{renderViewContent()}
			</AISidekickProvider>
			{isConsultationModalOpen && (
				<ConsultationModal onClose={() => setIsConsultationModalOpen(false)} onSuccess={() => { console.log('Consultation scheduled successfully!'); }} />
			)}
			{isAdminLoginOpen && view !== 'admin-setup' && (
				<Suspense fallback={<LoadingSpinner />}>
					<AdminLogin onLogin={handleAdminLogin} onBack={handleAdminLoginClose} isLoading={isAdminLoginLoading} error={adminLoginError || undefined} />
				</Suspense>
			)}
        {/* Chat Bot FAB - Available on all pages except AI Card */}
        {view !== 'ai-card' && (
          <ChatBotFAB
            context={{
              userType: user ? (isDemoMode ? 'prospect' : 'client') : 'visitor',
              currentPage: view,
              previousInteractions: user ? 1 : 0,
              userInfo: user ? { name: user.displayName || 'User', email: user.email || '', company: 'Real Estate' } : undefined
            }}
            onLeadGenerated={(leadInfo) => { console.log('Lead generated from chat:', leadInfo); }}
            onSupportTicket={(ticketInfo) => { console.log('Support ticket created from chat:', ticketInfo); }}
            position="bottom-right"
          />
        )}
		</ErrorBoundary>
	);
};

export default App;