import React, { useState } from 'react';
import { createUserWithEmailAndPassword, updateProfile } from "firebase/auth";
import { httpsCallable } from 'firebase/functions';
import { auth, functions } from '../services/firebase';
import { AuthHeader } from './AuthHeader';
import { AuthFooter } from './AuthFooter';
import { Logo } from './Logo';

interface SignUpPageProps {
    onNavigateToSignIn: () => void;
    onNavigateToLanding: () => void;
    onNavigateToSection: (sectionId: string) => void;
    onEnterDemoMode: () => void;
}

const SignUpPage = ({ onNavigateToSignIn, onNavigateToLanding, onNavigateToSection, onEnterDemoMode }: SignUpPageProps): JSX.Element => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [fullName, setFullName] = useState('');
    const [error, setError] = useState<React.ReactNode>('');
    const [isPasswordVisible, setIsPasswordVisible] = useState(false);

    const handleSignUp = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');

        try {
            // Validate inputs
            if (!email || !password || !fullName) {
                setError('Please fill in all fields');
                return;
            }

            // Validate email format
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                setError('Please enter a valid email address');
                return;
            }

            // Validate password strength
            if (password.length < 6) {
                setError('Password must be at least 6 characters long');
                return;
            }

            // Create user with email and password
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            
            // After user is created, update their profile with the full name
            await updateProfile(userCredential.user, {
                displayName: fullName,
            });

            // Trigger onboarding sequence
            try {
                const triggerOnboardingSequence = httpsCallable(functions, 'triggerOnboardingSequence');
                await triggerOnboardingSequence({
                    userEmail: email,
                    userName: fullName
                });
                console.log('Onboarding sequence triggered successfully');
            } catch (onboardingError) {
                console.error('Failed to trigger onboarding sequence:', onboardingError);
                // Don't fail the signup if onboarding fails
            }
        } catch (error: any) {
            console.error('Signup error:', error);
            
            if (error.code === 'auth/email-already-in-use') {
                setError(
                    <span>
                        This email address is already in use. Please{' '}
                        <button 
                            type="button" 
                            onClick={onNavigateToSignIn}
                            className="font-semibold text-primary-600 hover:underline focus:outline-none"
                        >
                            sign in
                        </button>
                        {' '}or use a different email.
                    </span>
                );
            } else {
                switch (error.code) {
                    case 'auth/invalid-email':
                        setError('Please enter a valid email address.');
                        break;
                    case 'auth/operation-not-allowed':
                        setError('Email/password accounts are not enabled. Please contact support.');
                        break;
                    case 'auth/weak-password':
                        setError('Please choose a stronger password (at least 6 characters).');
                        break;
                    default:
                        setError(error.message || 'An error occurred during sign up. Please try again.');
                }
            }
        }
    };

    return (
        <div className="min-h-screen bg-slate-50 font-sans">
            <AuthHeader 
                onNavigateToSignUp={() => {}} 
                onNavigateToSignIn={onNavigateToSignIn}
                onNavigateToLanding={onNavigateToLanding}
                onNavigateToSection={onNavigateToSection}
                onEnterDemoMode={onEnterDemoMode}
            />
            <main className="py-12 sm:py-20">
                {/* Form content here */}
                <div>Sign up form goes here</div>
            </main>
        </div>
    );
};

export default SignUpPage;
